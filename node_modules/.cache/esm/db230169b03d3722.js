let of,map,reduce,filter,ajax;_b03‍.w("rxjs",[["of",["of"],function(v){of=v}]]);_b03‍.w("rxjs/operators",[["map",["map"],function(v){map=v}],["reduce",["reduce"],function(v){reduce=v}],["filter",["filter"],function(v){filter=v}]]);_b03‍.w("rxjs/ajax",[["ajax",["ajax"],function(v){ajax=v}]]);// An operator is a pure function which takes in observable as input and the output is also an observable.




let test1 = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
let case1 = test1.pipe(
    filter(x => x % 2 === 0),
    reduce((acc, one) => acc + one, 0)
)
case1.subscribe(x => _b03‍.g.console.log(x)); // 2 + 4 + 6 + 8 + 10 = 30

// Categories of operators

// - Creation
// - Mathematical
// - Join
// - Transformation
// - Filtering
// - Utility
// - Conditional
// - Multicasting
// - Error handling

// Example of usages

// let [varName] = operator(String | Array | Object | Number | Boolean).subscribe(function)
// let [varName] = operator(String | Array | Object | Number | Boolean).pipe(listOfOperators.subscribe(function)



let final_val = ajax('https://jsonplaceholder.typicode.com/users')
    .pipe(
        map(e => e.response)
    );
final_val.subscribe(x => _b03‍.g.console.log(x));