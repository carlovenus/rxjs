let Observable;_a47‍.w("rxjs",[["Observable",["Observable"],function(v){Observable=v}]]);// import { of } from 'rxjs';
// import { map } from 'rxjs/operators';
//
// map(x => x * x)(of(1, 2, 3))
//     .subscribe((v) => console.log(`Output is: ${v}`));
//

// An observable is a function that creates an observer and attaches it to the source
// where values are expected from, for example, clicks, mouse events from a dom element or an Http request, etc.
// Observer is an object with callback functions, that will get called when there is interaction to the Observable,
// i.e., the source has interacted for an example button click, Http request, etc.



const observer = new Observable(
    function subscribe(subscriber) {
        subscriber.next("My First Observable")
    }
);

observer.subscribe(x => _a47‍.g.console.log(x)); // When the observer is subscribed, it will start the execution of the Observable.

//
// Execute Observable
// An observable gets executed when it is subscribed. An observer is an object with three methods that are notified,
// next() − This method will send values like a number, string, object etc.
// complete() − This method will not send any value and indicates the observable as completed.
// error() − This method will send the error if any.


const observer2 = new Observable(
    function subscribe(subscriber) {
        try {
            subscriber.next("My Second Observable");
            subscriber.next("Testing Observable");
            subscriber.complete("Dio schifo");
        } catch(e){
            subscriber.error(e);
        }
    }
);
observer2.subscribe(
    x => _a47‍.g.console.log(x),
    (e)=>_a47‍.g.console.log(e)
);